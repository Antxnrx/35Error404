import requests
import random
import pandas as pd
from datetime import datetime, timedelta
import time

# Set your TomTom API Key here
API_KEY = "g62O2BwnK0uIJR0rX30ElX0pPTyCzbwo"

# Generate a random point around a city (Bangalore in this example)
def random_point():
    lat = random.uniform(12.90, 13.05)
    lon = random.uniform(77.50, 77.70)
    return (lat, lon)

# Call TomTom Routing API
def get_tomtom_eta(start, end, departure_time=None):
    base_url = "https://api.tomtom.com/routing/1/calculateRoute"
    coordinates = f"{start[0]},{start[1]}:{end[0]},{end[1]}"
    
    params = {
        "key": API_KEY,
        "traffic": "false",  # Use true if you want traffic-based ETA
    }

    if departure_time:
        # Convert datetime to ISO format string
        params["departAt"] = departure_time.strftime("%Y-%m-%dT%H:%M:%S")

    url = f"{base_url}/{coordinates}/json"
    response = requests.get(url, params=params)
    
    if response.status_code == 200:
        data = response.json()
        route = data['routes'][0]['summary']
        return route['lengthInMeters'] / 1000, route['travelTimeInSeconds'] / 60
    else:
        print(f"Failed API call: {response.status_code}")
        return None, None

# Create dataset
def generate_dataset(num_customers=50, num_days=90, output_file="tomtom_eta_dataset.csv"):
    dataset = []
    for cust_id in range(1, num_customers + 1):
        home = random_point()
        office = random_point()
        
        for day in range(num_days):
            base_date = datetime(2024, 1, 1) + timedelta(days=day)

            for trip_num in range(2):  # morning and evening trips
                hour = random.randint(7, 9) if trip_num == 0 else random.randint(17, 19)
                dep_time = base_date.replace(hour=hour, minute=random.randint(0, 59))
                
                # Direction: home -> office in morning, reverse in evening
                origin = home if trip_num == 0 else office
                destination = office if trip_num == 0 else home

                # Call TomTom API
                distance_km, duration_min = get_tomtom_eta(origin, destination, dep_time)
                
                # If successful, store the trip
                if duration_min is not None:
                    dataset.append({
                        "customer_id": cust_id,
                        "home_lat": home[0], "home_lon": home[1],
                        "office_lat": office[0], "office_lon": office[1],
                        "departure_time": dep_time,
                        "distance_km": round(distance_km, 2),
                        "duration_min": round(duration_min, 2)
                    })

                time.sleep(0.5)  # avoid hitting API rate limit (adjust as needed)

    # Save to CSV
    df = pd.DataFrame(dataset)
    df.to_csv(output_file, index=False)
    print(f"Dataset generated: {output_file}")

generate_dataset()
